<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Wapping</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    body { background:#1e1e2f; color:#f0f0f0; font-family:Arial,Helvetica,sans-serif; text-align:center; padding:24px; }
    h1 { color:#ffcc00; margin:0 0 14px; font-size:40px; }
    .timer{
      background:#2c2c3e; margin:12px auto; padding:12px 16px; border-radius:10px;
      width:1100px; max-width:95vw; display:flex; align-items:center; justify-content:space-between;
      gap:14px; font-size:16px; white-space:nowrap; box-shadow:0 4px 10px rgba(0,0,0,.35);
      outline:1px solid rgba(255,255,255,.08);
    }
    .timer.ack { 
      background:#234231; 
      outline:1px solid #2ecc71; 
    }
    .left{ overflow:hidden; text-overflow:ellipsis; }
    .time{ font-weight:700; font-variant-numeric:tabular-nums; margin-left:8px; }
    .right{ display:inline-flex; align-items:center; gap:10px; }
    .speaker{ cursor:pointer; font-size:18px; }
    .controls{ margin:18px 0; display:flex; gap:10px; justify-content:center; flex-wrap:wrap; }
    button{ border:none; border-radius:8px; padding:9px 16px; font-weight:600; cursor:pointer; color:#fff; background:#3498db; }
    #toggleBtn{ background:#3498db; } 
    #resetBtn{ background:#dc3545; } 
    #muteBtn{ background:#17a2b8; }
    button:hover{ opacity:.9; }
    footer{ margin-top:26px; padding-top:10px; border-top:1px solid #444; opacity:.9; font-size:14px; }
    .dogdog{ color:#ffcc00; font-weight:700; }
  </style>
</head>
<body>
  <h1>Wapping</h1>

  <div id="rows"></div>

  <div class="controls">
    <button id="toggleBtn">Start</button>
    <button id="resetBtn">Reset</button>
    <button id="muteBtn">Mute</button>
  </div>

  <footer>
    <strong>Want your own custom reminders?</strong><br>
    Reach out to <span class="dogdog">Dogdog</span> for personalized versions üê∂
  </footer>

  <script>
    // Reminders (secs + initial label shown before Start)
    const items = [
      { text: "Use phalanx u fucken dog", secs: 30,  say: "Use phalanx u fucken dog", initialDisplay: "30s" },
      { text: "Use erda fountain and loot ur mesos u fucken dog", secs: 55,  say: "Use erda fountain and loot your mesos u fucken dog", initialDisplay: "55s" },
      { text: "Pop ur fucken EXP multipliers or ur a dog", secs: 30 * 60, say: "Pop your fucken E X P multipliers or you're a dog", initialDisplay: "00:30:00" },
      { text: "If ur a true blue fair dinkum aussie, ud pop a VB longneck wap u fucken dog cunts", secs: 2 * 60 * 60, say: "If you're a true blue fair dinkum aussie, you'd pop a V B longneck wap u fucken dog cunts", initialDisplay: "2h" }
    ];

    let counters   = items.map(i => i.secs);
    let timerId    = null;
    let isRunning  = false;
    let isPaused   = false;
    let muted      = false;
    let femaleVoice = null;

    // Build rows
    const rowsDiv = document.getElementById("rows");
    items.forEach((it, i) => {
      const row = document.createElement("div");
      row.className = "timer";
      row.id = `row${i}`;
      row.innerHTML = `
        <div class="left">${it.text} ‚Äî <span class="time" id="time${i}">${it.initialDisplay}</span></div>
        <div class="right"><span class="speaker" data-idx="${i}" title="Test voice">üîä</span></div>
      `;
      rowsDiv.appendChild(row);
    });

    // Test buttons
    document.querySelectorAll(".speaker").forEach(btn => {
      btn.addEventListener("click", () => {
        const idx = Number(btn.getAttribute("data-idx"));
        speak(items[idx].say, idx);
      });
    });

    // Voice selection
    function pickVoice() {
      const voices = speechSynthesis.getVoices();
      femaleVoice =
        voices.find(v => v.name.toLowerCase().includes("female")) ||
        voices.find(v => /female/i.test(v.voiceURI)) ||
        voices.find(v => v.name.includes("Google UK English Female")) ||
        voices[0] || null;
    }
    speechSynthesis.onvoiceschanged = pickVoice; pickVoice();

    function speak(msg, idx) {
      if (muted) return;
      const u = new SpeechSynthesisUtterance(msg);
      if (femaleVoice) u.voice = femaleVoice;

      const row = document.getElementById(`row${idx}`);
      if (row) row.classList.add("ack");

      u.onend = () => {
        if (row) row.classList.remove("ack");
      };

      speechSynthesis.speak(u);
    }

    // HH:MM:SS for long timers
    function hms(sec){
      const h=String(Math.floor(sec/3600)).padStart(2,"0");
      const m=String(Math.floor((sec%3600)/60)).padStart(2,"0");
      const s=String(sec%60).padStart(2,"0");
      return `${h}:${m}:${s}`;
    }

    function paint(initial=false){
      items.forEach((it,i)=>{
        const el=document.getElementById(`time${i}`);
        if (initial) {
          el.textContent = it.initialDisplay; 
        } else {
          el.textContent = (it.secs < 60) ? (counters[i] + "s") : hms(counters[i]);
        }
      });
    }

    function startTicking(){
      if (timerId) return;
      timerId = setInterval(() => {
        items.forEach((it,i)=>{
          counters[i]--;
          if (counters[i] <= 0) {
            speak(it.say, i);
            counters[i] = it.secs;
          }
        });
        paint(false);
      }, 1000);
    }

    function stopTicking(){
      clearInterval(timerId);
      timerId = null;
    }

    // Controls
    const toggleBtn = document.getElementById("toggleBtn");
    const resetBtn  = document.getElementById("resetBtn");
    const muteBtn   = document.getElementById("muteBtn");

    toggleBtn.onclick = () => {
      if (!isRunning) {
        isRunning = true;
        isPaused  = false;
        paint(false);
        startTicking();
        toggleBtn.textContent = "Pause";
      } else if (!isPaused) {
        isPaused = true;
        stopTicking();
        toggleBtn.textContent = "Resume";
      } else {
        isPaused = false;
        startTicking();
        toggleBtn.textContent = "Pause";
      }
    };

    resetBtn.onclick = () => {
      stopTicking();
      counters  = items.map(i => i.secs);
      isRunning = false;
      isPaused  = false;
      toggleBtn.textContent = "Start";
      paint(true); 
    };

    muteBtn.onclick = () => {
      muted = !muted;
      muteBtn.textContent = muted ? "Unmute" : "Mute";
    };

    paint(true);
  </script>
</body>
</html>
